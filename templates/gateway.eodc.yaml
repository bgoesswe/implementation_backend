---
kind: Template
apiVersion: v1
metadata:
  name: openeo-gateway
  annotations:
    openshift.io/display-name: openeo-gateway
    description: >-
      The templates instantiates the gateway for openEO on OpenShift Origin.
    openshift.io/long-description: >-
      Multiple services are setup to provide the OpenEO capabilities. For setting up a
      OpenShift cluster and configure persitant storage please read the OpenShift documentation.
      Fur further information on OpenEO please have a look at http://openeo.org
    tags: openeo, openshift, python, flask
    iconClass: icon-python
labels:
  application: openeo-gateway
  provider: openeo
  project: openeo
  app: openeo-gateway
  version: 0.0.1
message: "The openEO template will be instantiated." 

parameters:
- name: SERVICE_PREFIX
  displayName: Service Prefix
  value: openeo
  required: true
- name: SERVICE_NAME
  displayName: Service Name
  value: gateway
  required: true
- name: GATEWAY_SETTINGS
  displayName: Settings configuration
  value: config.ProductionConfig
  required: true
- name: HOST
  displayName: HOST URL
  value: openeo.eodc.eu 
  required: true
- name: CONTACT_NAME
  displayName: Name of Organization
  value: EODC
  required: true
- name: CONTACT_URL
  displayName: URL of Organization
  value: https://www.eodc.eu 
  required: true
- name: CONTACT_EMAIL
  displayName: Email of Organization
  value: gunnar.busch@eodc.eu
  required: true
- name: GATEWAY_URL
  displayName: GATEWAY URL (Internal OpenShift)
  value: openeo.03.193.170.203.100.xip.io  
  required: true
- name: SECRET_KEY
  displayName: Secret for OIDC Hashing
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  required: true
- name: OIDC_CLIENT_SECRETS
  displayName: OIDC CLIENT SECRETS
  value: "/secrets/client_secrets.json"
  required: true
- name: OIDC_OPENID_REALM
  displayName: OIDC OPENID REALM
  value: eodc
  required: true
- name: OIDC_ID_TOKEN_COOKIE_SECURE
  displayName: OIDC_ID_TOKEN_COOKIE_SECURE
  value: "false"
  required: true
- name: GIT_URI
  displayName: Git URI
  value: https://github.com/Open-EO/openeo-openshift-driver.git
  required: true
- name: GIT_REF
  displayName: Git Directory
  value: master
  required: true
- name: GIT_DIR
  displayName: Git Directory
  value: gateway
  required: true
- name: MEMORY_LIMIT_SERVICE
  displayName: Memory Limit
  value: 512Mi
  required: true
- name: CLIENT_JSON
  displayName: The name of the deploy key in OpenShift
  value: >-
    {
      "web": {
          "issuer": "https://bouncer.eodc.eu/auth/realms/EODC",
          "auth_uri": "https://bouncer.eodc.eu/auth/realms/EODC/protocol/openid-connect/auth",
          "client_id": "openeo",
          "client_secret": "02b95f76-0b06-42d4-ad4b-662222d2f797",
          "redirect_uris": [
              "http://localhost:5000/*"
          ],
          "userinfo_uri": "https://bouncer.eodc.eu/auth/realms/EODC/protocol/openid-connect/userinfo",
          "token_uri": "https://bouncer.eodc.eu/auth/realms/EODC/protocol/openid-connect/token",
          "token_introspection_uri": "https://bouncer.eodc.eu/auth/realms/EODC/protocol/openid-connect/token/introspect"
      } 
    }
  required: true

objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-${SERVICE_NAME}"
  spec:
    dockerImageRepository:
    tags:
    - name: latest

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-${SERVICE_NAME}"
  spec:
    source:
      type: Git
      git:
        uri: "${GIT_URI}"
        ref: "${GIT_REF}"
      contextDir: "${GIT_DIR}"
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
    output:
      to:
        kind: ImageStreamTag
        name: "${SERVICE_PREFIX}-${SERVICE_NAME}:latest"
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChange:

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-${SERVICE_NAME}"
    labels:
      name: "${SERVICE_PREFIX}-${SERVICE_NAME}"
      application: "${SERVICE_PREFIX}-${SERVICE_NAME}"
      provider: "${SERVICE_PREFIX}"
      project: "${SERVICE_PREFIX}"
      app: "${SERVICE_PREFIX}-${SERVICE_NAME}"
      version: 0.0.1
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${SERVICE_PREFIX}-${SERVICE_NAME}"
        from:
          kind: ImageStreamTag
          name: "${SERVICE_PREFIX}-${SERVICE_NAME}:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${SERVICE_PREFIX}-${SERVICE_NAME}"
    template:
      metadata:
        labels:
          name: "${SERVICE_PREFIX}-${SERVICE_NAME}"
      spec:
        containers:
        - name: "${SERVICE_PREFIX}-${SERVICE_NAME}"
          image: "${SERVICE_PREFIX}-${SERVICE_NAME}"
          ports:
          - containerPort: 5000
            protocol: TCP
          readinessProbe:
            httpGet:
              path: "/health"
              port: 5000
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 5000
          env:
          - name: GATEWAY_SETTINGS
            value: "${GATEWAY_SETTINGS}"
          - name: HOST
            value: "${HOST}"
          - name: CONTACT_NAME
            value: "${CONTACT_NAME}"
          - name: CONTACT_URL
            value: "${CONTACT_URL}"
          - name: CONTACT_EMAIL
            value: "${CONTACT_EMAIL}"
          - name: GATEWAY_URL
            value: "${GATEWAY_URL}"
          - name: SECRET_KEY
            value: "${SECRET_KEY}"
          - name: OIDC_CLIENT_SECRETS
            value: "${OIDC_CLIENT_SECRETS}"
          - name: OIDC_OPENID_REALM
            value: "${OIDC_OPENID_REALM}"
          - name: OIDC_ID_TOKEN_COOKIE_SECURE
            value: "${OIDC_ID_TOKEN_COOKIE_SECURE}"
          - name: RABBIT_HOST
            value: "${SERVICE_PREFIX}-rabbitmq"
          - name: RABBIT_USER
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-rabbitmq"
                key: rabbitmq-user
          - name: RABBIT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-rabbitmq"
                key: rabbitmq-password
          - name: RABBIT_PORT
            valueFrom:
              secretKeyRef:
                name: "${SERVICE_PREFIX}-rabbitmq"
                key: rabbitmq-port
          resources:
            limits:
              memory: "${MEMORY_LIMIT_SERVICE}"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          securityContext:
            capabilities:
            privileged: false
          volumeMounts:
          - name: client-secrets
            mountPath: /secrets
        volumes:
        - name: client-secrets
          configMap:
            name: "${SERVICE_PREFIX}-${SERVICE_NAME}-oidc"
        restartPolicy: Always
        dnsPolicy: ClusterFirst

- kind: Route
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-${SERVICE_NAME}"
    annotations:
      description: openEO API Gateway
  spec:
    host: "${GATEWAY_URL}"
    to:
      kind: Service
      name: "${SERVICE_PREFIX}-${SERVICE_NAME}"

- kind: Service
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-${SERVICE_NAME}"
    annotations:
      description: The port of the gateway
  spec:
    ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
    selector:
      name: "${SERVICE_PREFIX}-${SERVICE_NAME}"

- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "${SERVICE_PREFIX}-${SERVICE_NAME}-oidc"
    annotations:
      description: OIDC client secrets file
  data: 
    client_secrets.json: "${CLIENT_JSON}"
